#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Build Script for Gmail OAuth Client JSON Generator
.exe ржлрж╛ржЗрж▓ рждрзИрж░рж┐ ржХрж░рж╛рж░ ржЬржирзНржп ржмрж┐рж▓рзНржб рж╕рзНржХрзНрж░рж┐ржкрзНржЯ
"""

import os
import sys
import subprocess
import shutil
import time
import psutil
from pathlib import Path

def kill_running_processes():
    """ржЪрж▓ржорж╛ржи Gmail_OAuth_Generator.exe ржкрзНрж░рж╕рзЗрж╕ ржмржирзНржз ржХрж░рж╛"""
    try:
        for proc in psutil.process_iter(['pid', 'name']):
            if proc.info['name'] and 'Gmail_OAuth_Generator' in proc.info['name']:
                print(f"ЁЯФД ржЪрж▓ржорж╛ржи ржкрзНрж░рж╕рзЗрж╕ ржмржирзНржз ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ: {proc.info['name']} (PID: {proc.info['pid']})")
                try:
                    proc.terminate()
                    proc.wait(timeout=5)
                    print(f"тЬЕ ржкрзНрж░рж╕рзЗрж╕ рж╕ржлрж▓ржнрж╛ржмрзЗ ржмржирзНржз рж╣ржпрж╝рзЗржЫрзЗ")
                except (psutil.NoSuchProcess, psutil.TimeoutExpired):
                    try:
                        proc.kill()
                        print(f"тЬЕ ржкрзНрж░рж╕рзЗрж╕ ржЬрзЛрж░ржкрзВрж░рзНржмржХ ржмржирзНржз ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ")
                    except psutil.NoSuchProcess:
                        pass
    except Exception as e:
        print(f"тЪая╕П ржкрзНрж░рж╕рзЗрж╕ ржмржирзНржз ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛: {e}")

def safe_remove_file(file_path, max_retries=3, delay=1):
    """ржирж┐рж░рж╛ржкржжрзЗ ржлрж╛ржЗрж▓ ржорзБржЫрзЗ ржлрзЗрж▓рж╛ retry logic рж╕рж╣"""
    for attempt in range(max_retries):
        try:
            if os.path.exists(file_path):
                os.remove(file_path)
                return True
        except PermissionError:
            if attempt < max_retries - 1:
                print(f"тЪая╕П ржлрж╛ржЗрж▓ locked, {delay} рж╕рзЗржХрзЗржирзНржб ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ... (ржЪрзЗрж╖рзНржЯрж╛ {attempt + 1}/{max_retries})")
                time.sleep(delay)
                delay *= 2  # Exponential backoff
            else:
                print(f"тЭМ ржлрж╛ржЗрж▓ ржорзБржЫрждрзЗ ржкрж╛рж░ржЫрж┐ ржирж╛: {file_path}")
                print(f"ЁЯТб рж╕ржорж╛ржзрж╛ржи: ржорзНржпрж╛ржирзБржпрж╝рж╛рж▓рж┐ Gmail_OAuth_Generator.exe ржмржирзНржз ржХрж░рзБржи ржПржмржВ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи")
                return False
        except Exception as e:
            print(f"тЭМ ржлрж╛ржЗрж▓ ржорзБржЫрждрзЗ рж╕ржорж╕рзНржпрж╛: {e}")
            return False
    return True

def safe_remove_directory(dir_path, max_retries=3, delay=1):
    """ржирж┐рж░рж╛ржкржжрзЗ ржбрж┐рж░рзЗржХрзНржЯрж░рж┐ ржорзБржЫрзЗ ржлрзЗрж▓рж╛ retry logic рж╕рж╣"""
    for attempt in range(max_retries):
        try:
            if os.path.exists(dir_path):
                shutil.rmtree(dir_path)
                return True
        except PermissionError as e:
            if attempt < max_retries - 1:
                print(f"тЪая╕П ржбрж┐рж░рзЗржХрзНржЯрж░рж┐ locked, {delay} рж╕рзЗржХрзЗржирзНржб ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ... (ржЪрзЗрж╖рзНржЯрж╛ {attempt + 1}/{max_retries})")
                time.sleep(delay)
                delay *= 2  # Exponential backoff
            else:
                print(f"тЭМ ржбрж┐рж░рзЗржХрзНржЯрж░рж┐ ржорзБржЫрждрзЗ ржкрж╛рж░ржЫрж┐ ржирж╛: {dir_path}")
                print(f"ЁЯТб рж╕ржорж╛ржзрж╛ржи: рж╕ржХрж▓ Gmail_OAuth_Generator ржкрзНрж░рж╕рзЗрж╕ ржмржирзНржз ржХрж░рзБржи ржПржмржВ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи")
                return False
        except Exception as e:
            print(f"тЭМ ржбрж┐рж░рзЗржХрзНржЯрж░рж┐ ржорзБржЫрждрзЗ рж╕ржорж╕рзНржпрж╛: {e}")
            return False
    return True

def clean_build_dirs():
    """ржкрзБрж░рж╛ржирзЛ build ржПржмржВ dist ржбрж┐рж░рзЗржХрзНржЯрж░рж┐ ржкрж░рж┐рж╖рзНржХрж╛рж░ ржХрж░рж╛"""
    # ржкрзНрж░ржержорзЗ ржЪрж▓ржорж╛ржи ржкрзНрж░рж╕рзЗрж╕ ржмржирзНржз ржХрж░рж╛
    print("ЁЯФН ржЪрж▓ржорж╛ржи Gmail_OAuth_Generator ржкрзНрж░рж╕рзЗрж╕ ржЦрзЛржБржЬрж╛ рж╣ржЪрзНржЫрзЗ...")
    kill_running_processes()
    
    # ржХрж┐ржЫрзБржХрзНрж╖ржг ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рж╛
    time.sleep(2)
    
    dirs_to_clean = ['build', 'dist', '__pycache__']
    
    for dir_name in dirs_to_clean:
        if os.path.exists(dir_name):
            print(f"ржкрж░рж┐рж╖рзНржХрж╛рж░ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ: {dir_name}")
            if not safe_remove_directory(dir_name):
                print(f"тЭМ {dir_name} ржбрж┐рж░рзЗржХрзНржЯрж░рж┐ ржкрж░рж┐рж╖рзНржХрж╛рж░ ржХрж░рждрзЗ ржмрзНржпрж░рзНрже")
                return False
            
    # Remove .spec files
    for spec_file in Path('.').glob('*.spec'):
        print(f"ржорзБржЫрзЗ ржлрзЗрж▓рж╛ рж╣ржЪрзНржЫрзЗ: {spec_file}")
        if not safe_remove_file(str(spec_file)):
            print(f"тЭМ {spec_file} ржлрж╛ржЗрж▓ ржорзБржЫрждрзЗ ржмрзНржпрж░рзНрже")
            return False
    
    return True

def install_requirements():
    """ржкрзНрж░ржпрж╝рзЛржЬржирзАржпрж╝ packages ржЗржирж╕рзНржЯрж▓ ржХрж░рж╛"""
    print("ржкрзНрж░ржпрж╝рзЛржЬржирзАржпрж╝ packages ржЗржирж╕рзНржЯрж▓ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...")
    try:
        subprocess.run([sys.executable, '-m', 'pip', 'install', '-r', 'requirements.txt'], 
                      check=True, capture_output=True, text=True)
        print("тЬЕ рж╕ржХрж▓ packages рж╕ржлрж▓ржнрж╛ржмрзЗ ржЗржирж╕рзНржЯрж▓ рж╣ржпрж╝рзЗржЫрзЗ")
    except subprocess.CalledProcessError as e:
        print(f"тЭМ Package ржЗржирж╕рзНржЯрж▓рзЗрж╢ржирзЗ рж╕ржорж╕рзНржпрж╛: {e}")
        print(f"Error output: {e.stderr}")
        return False
    return True

def build_executable():
    """PyInstaller ржжрж┐ржпрж╝рзЗ .exe ржлрж╛ржЗрж▓ рждрзИрж░рж┐ ржХрж░рж╛"""
    print(".exe ржлрж╛ржЗрж▓ рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...")
    
    # PyInstaller command with Windows 7 compatibility
    cmd = [
        'pyinstaller',
        '--onefile',                    # Single executable file
        '--noconsole',                  # No console window
        '--name=Gmail_OAuth_Generator', # Executable name
        '--icon=icon.ico',             # Icon (if exists)
        '--add-data=output;output',    # Include output directory
        '--hidden-import=selenium',     # Ensure selenium is included
        '--hidden-import=tkinter',      # Ensure tkinter is included
        '--hidden-import=_tkinter',     # Ensure _tkinter is included
        '--hidden-import=pymsgbox',     # Ensure pymsgbox is included
        '--noupx',                     # Disable UPX for Windows 7 compatibility
        '--target-architecture=x86_64', # Specify architecture
        'main.py'
    ]
    
    # Remove icon parameter if icon file doesn't exist
    if not os.path.exists('icon.ico'):
        cmd = [arg for arg in cmd if not arg.startswith('--icon')]
    
    try:
        result = subprocess.run(cmd, check=True, capture_output=True, text=True)
        print("тЬЕ .exe ржлрж╛ржЗрж▓ рж╕ржлрж▓ржнрж╛ржмрзЗ рждрзИрж░рж┐ рж╣ржпрж╝рзЗржЫрзЗ")
        print(f"ржлрж╛ржЗрж▓рзЗрж░ ржЕржмрж╕рзНржерж╛ржи: dist/Gmail_OAuth_Generator.exe")
        return True
    except subprocess.CalledProcessError as e:
        print(f"тЭМ .exe рждрзИрж░рж┐рждрзЗ рж╕ржорж╕рзНржпрж╛: {e}")
        print(f"Error output: {e.stderr}")
        return False
    except FileNotFoundError:
        print("тЭМ PyInstaller ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред ржкрзНрж░ржержорзЗ ржЗржирж╕рзНржЯрж▓ ржХрж░рзБржи: pip install pyinstaller")
        return False

def copy_additional_files():
    """ржЕрждрж┐рж░рж┐ржХрзНржд ржлрж╛ржЗрж▓ dist ржлрзЛрж▓рзНржбрж╛рж░рзЗ ржХржкрж┐ ржХрж░рж╛"""
    print("ржЕрждрж┐рж░рж┐ржХрзНржд ржлрж╛ржЗрж▓ ржХржкрж┐ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...")
    
    files_to_copy = [
        'README.md',
        'accounts.txt',
        'requirements.txt'
    ]
    
    dist_dir = Path('dist')
    if not dist_dir.exists():
        dist_dir.mkdir()
    
    for file_name in files_to_copy:
        if os.path.exists(file_name):
            shutil.copy2(file_name, dist_dir / file_name)
            print(f"тЬЕ ржХржкрж┐ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ: {file_name}")
    
    # Create output directory in dist
    output_dir = dist_dir / 'output'
    if not output_dir.exists():
        output_dir.mkdir()
        print("тЬЕ output ржбрж┐рж░рзЗржХрзНржЯрж░рж┐ рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ")

def main():
    """ржорзВрж▓ ржмрж┐рж▓рзНржб ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛"""
    print("=" * 50)
    print("Gmail OAuth Client JSON Generator")
    print(".exe Build Script")
    print("=" * 50)
    
    # Step 1: Clean previous builds
    print("\n1я╕ПтГг ржкрзБрж░рж╛ржирзЛ build ржлрж╛ржЗрж▓ ржкрж░рж┐рж╖рзНржХрж╛рж░ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...")
    if not clean_build_dirs():
        print("тЭМ Build ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ ржмржирзНржз ржХрж░рж╛ рж╣рж▓рзЛ - ржлрж╛ржЗрж▓ ржкрж░рж┐рж╖рзНржХрж╛рж░ ржХрж░рждрзЗ ржмрзНржпрж░рзНрже")
        print("ЁЯТб рж╕ржорж╛ржзрж╛ржи: Gmail_OAuth_Generator.exe ржмржирзНржз ржХрж░рзБржи ржПржмржВ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи")
        return False
    
    # Step 2: Install requirements
    print("\n2я╕ПтГг Dependencies ржЗржирж╕рзНржЯрж▓ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...")
    if not install_requirements():
        print("тЭМ Build ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ ржмржирзНржз ржХрж░рж╛ рж╣рж▓рзЛ")
        return False
    
    # Step 3: Build executable
    print("\n3я╕ПтГг .exe ржлрж╛ржЗрж▓ рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...")
    if not build_executable():
        print("тЭМ Build ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ ржмржирзНржз ржХрж░рж╛ рж╣рж▓рзЛ")
        return False
    
    # Step 4: Copy additional files
    print("\n4я╕ПтГг ржЕрждрж┐рж░рж┐ржХрзНржд ржлрж╛ржЗрж▓ ржХржкрж┐ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...")
    copy_additional_files()
    
    print("\n" + "=" * 50)
    print("ЁЯОЙ Build рж╕ржлрж▓ржнрж╛ржмрзЗ рж╕ржорзНржкржирзНржи рж╣ржпрж╝рзЗржЫрзЗ!")
    print("ЁЯУБ ржлрж╛ржЗрж▓рзЗрж░ ржЕржмрж╕рзНржерж╛ржи: dist/Gmail_OAuth_Generator.exe")
    print("=" * 50)
    
    return True

if __name__ == "__main__":
    success = main()
    if not success:
        sys.exit(1)